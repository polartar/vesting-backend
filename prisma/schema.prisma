datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  // previewFeatures = []
}

generator dbml {
  provider = "prisma-dbml-generator"
}

enum Role {
  FOUNDER
  MANAGER
  OPERATOR
  ADVISOR
  EMPLOYEE
  INVESTOR
}

enum ReleaseFrequencyType {
  CONTINUOUS
  DAILY
  WEEKLY
  MONTHLY
  YEARLY
  CUSTOM
}

enum CliffDurationType {
  NO_CLIFF
  WEEKS
  MONTHS
  YEARS
}

enum RecipeStatus {
  ACCEPTED
  PENDING
  REVOKED
}

enum TransactionStatus {
  DRAFT
  PENDING
  CONFIRMED
}

enum ConfirmationStatus {
  APPROVED
  REJECTED
}

model User {
  id            String         @id @default(uuid())
  createdAt     DateTime       @default(now()) @map("created_at")
  updatedAt     DateTime       @updatedAt @map("updated_at")
  email         String         @unique
  name          String?
  isActive      Boolean        @default(true) @map("is_active")
  isAdmin       Boolean        @default(false) @map("is_admin")
  Wallets       Wallet[]
  Organizations Organization[]
  Roles         UserRole[]
  Recipes       Recipe[]

  @@map("user")
}

model EmailVerification {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  email     String   @unique
  code      String   @unique
  expiredAt BigInt   @map("expired_at")

  @@map("email_verification")
}

model Wallet {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  address   String   @unique
  userId    String   @map("user_id")
  User      User     @relation(fields: [userId], references: [id])

  @@map("wallet")
}

model Organization {
  id               String              @id @default(uuid())
  createdAt        DateTime            @default(now()) @map("created_at")
  updatedAt        DateTime            @updatedAt @map("updated_at")
  userId           String              @map("user_id")
  User             User                @relation(fields: [userId], references: [id])
  name             String
  email            String
  Users            UserRole[]
  Tokens           OrganizationToken[]
  VestingContracts VestingContract[]
  Vestings         Vesting[]
  Recipes          Recipe[]

  @@map("organization")
}

model UserRole {
  id             String       @id @default(uuid())
  createdAt      DateTime     @default(now()) @map("created_at")
  updatedAt      DateTime     @updatedAt @map("updated_at")
  role           Role         @default(FOUNDER)
  userId         String       @map("user_id")
  User           User         @relation(fields: [userId], references: [id])
  organizationId String       @map("organization_id")
  Organization   Organization @relation(fields: [organizationId], references: [id])

  @@map("user_role")
}

model Transaction {
  id                String             @id @default(uuid())
  createdAt         DateTime           @default(now()) @map("created_at")
  updatedAt         DateTime           @updatedAt @map("updated_at")
  chainId           Int                @map("chain_id")
  hash              String
  status            TransactionStatus  @default(DRAFT)
  Tokens            Token[]
  VestingContracts  VestingContract[]
  Vestings          Vesting[]
  SafeWallets       SafeWallet[]
  SafeConfirmations SafeConfirmation[]

  @@map("transaction")
}

model Token {
  id               String              @id @default(uuid())
  createdAt        DateTime            @default(now()) @map("created_at")
  updatedAt        DateTime            @updatedAt @map("updated_at")
  name             String
  symbol           String
  description      String?
  maxSupply        String?             @map("max_supply")
  chainId          Int?                @map("chain_id")
  address          String?
  logo             String?
  transactionId    String?             @map("transaction_id")
  Transaction      Transaction?        @relation(fields: [transactionId], references: [id])
  isDeployed       Boolean             @default(false) @map("is_deployed")
  isActive         Boolean             @default(true) @map("is_active")
  Organizations    OrganizationToken[]
  VestingContracts VestingContract[]
  Vestings         Vesting[]

  @@map("token")
}

model OrganizationToken {
  id             String       @id @default(uuid())
  createdAt      DateTime     @default(now()) @map("created_at")
  updatedAt      DateTime     @updatedAt @map("updated_at")
  organizationId String       @map("organization_id")
  Organization   Organization @relation(fields: [organizationId], references: [id])
  tokenId        String       @map("token_id")
  Token          Token        @relation(fields: [tokenId], references: [id])

  @@map("organization_token")
}

model VestingContract {
  id             String       @id @default(uuid())
  createdAt      DateTime     @default(now()) @map("created_at")
  updatedAt      DateTime     @updatedAt @map("updated_at")
  organizationId String       @map("organization_id")
  Organization   Organization @relation(fields: [organizationId], references: [id])
  tokenId        String       @map("token_id")
  Token          Token        @relation(fields: [tokenId], references: [id])
  name           String
  address        String?
  chainId        Int?         @map("chain_id")
  transactionId  String?      @map("transaction_id")
  Transaction    Transaction? @relation(fields: [transactionId], references: [id])
  isDeployed     Boolean      @default(false) @map("is_deployed")
  isActive       Boolean      @default(true) @map("is_active")
  Vestings       Vesting[]

  @@map("vesting_contract")
}

model Vesting {
  id                   String               @id @default(uuid())
  createdAt            DateTime             @default(now()) @map("created_at")
  updatedAt            DateTime             @updatedAt @map("updated_at")
  organizationId       String               @map("organization_id")
  Organization         Organization         @relation(fields: [organizationId], references: [id])
  tokenId              String               @map("token_id")
  Token                Token                @relation(fields: [tokenId], references: [id])
  vestingContractId    String               @map("vesting_contract_id")
  VestingContract      VestingContract      @relation(fields: [vestingContractId], references: [id])
  name                 String
  startedAt            DateTime             @map("started_at")
  endedAt              DateTime             @map("ended_at")
  releaseFrequencyType ReleaseFrequencyType @default(CONTINUOUS) @map("release_frequency_type")
  releaseFrequency     Int                  @map("release_frequency")
  cliffDurationType    CliffDurationType    @default(NO_CLIFF) @map("cliff_duration_type")
  cliffDuration        Int                  @default(0) @map("cliff_duration")
  cliffAmount          Int                  @default(0) @map("cliff_amount")
  amount               String
  transactionId        String?              @map("transaction_id")
  Transaction          Transaction?         @relation(fields: [transactionId], references: [id])
  Recipies             Recipe[]

  @@map("vesting")
}

model Recipe {
  id             String       @id @default(uuid())
  createdAt      DateTime     @default(now()) @map("created_at")
  updatedAt      DateTime     @updatedAt @map("updated_at")
  vestingId      String       @map("vesting_id")
  Vesting        Vesting      @relation(fields: [vestingId], references: [id])
  recipientId    String       @map("recipient_id")
  Recipient      User         @relation(fields: [recipientId], references: [id])
  organizationId String       @map("organization_id")
  Organization   Organization @relation(fields: [organizationId], references: [id])
  allocations    String
  status         RecipeStatus @default(PENDING)

  @@map("recipe")
}

model SafeWallet {
  id                    String             @id @default(uuid())
  createdAt             DateTime           @default(now()) @map("created_at")
  updatedAt             DateTime           @updatedAt @map("updated_at")
  chainId               Int                @map("chain_id")
  address               String
  organizationId        String             @map("organization_id")
  requiredConfirmations Int                @map("required_confirmations")
  transactionId         String?            @map("transaction_id")
  Transaction           Transaction?       @relation(fields: [transactionId], references: [id])
  SafeOwners            SafeOwner[]
  SafeConfirmations     SafeConfirmation[]

  @@map("safe_wallet")
}

model SafeOwner {
  id                String             @id @default(uuid())
  createdAt         DateTime           @default(now()) @map("created_at")
  updatedAt         DateTime           @updatedAt @map("updated_at")
  safeWalletId      String             @map("safe_wallet_id")
  SafeWallet        SafeWallet         @relation(fields: [safeWalletId], references: [id])
  address           String
  SafeConfirmations SafeConfirmation[]

  @@map("safe_owner")
}

model SafeConfirmation {
  id            String             @id @default(uuid())
  createdAt     DateTime           @default(now()) @map("created_at")
  updatedAt     DateTime           @updatedAt @map("updated_at")
  safeWalletId  String             @map("safe_wallet_id")
  SafeWallet    SafeWallet         @relation(fields: [safeWalletId], references: [id])
  safeOwnerId   String             @map("safe_owner_id")
  SafeOwner     SafeOwner          @relation(fields: [safeOwnerId], references: [id])
  transactionId String             @map("transaction_id")
  Transaction   Transaction        @relation(fields: [transactionId], references: [id])
  status        ConfirmationStatus

  @@map("safe_confirmation")
}

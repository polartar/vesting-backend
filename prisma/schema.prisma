datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  // previewFeatures = []
}

generator dbml {
  provider = "prisma-dbml-generator"
}

enum Role {
  FOUNDER
  MANAGER
  OPERATOR
  ADVISOR
  EMPLOYEE
  INVESTOR
}

enum InstitutionalRole {
  ADMIN
  MEMBER
}

enum ReleaseFrequencyType {
  continuous @map("CONTINUOUS")
  daily      @map("DAILY")
  weekly     @map("WEEKLY")
  monthly    @map("MONTHLY")
  yearly     @map("YEARLY")
  custom     @map("CUSTOM")
}

enum CliffDurationType {
  no_cliff @map("NO_CLIFF")
  weeks    @map("WEEKS")
  months   @map("MONTHS")
  years    @map("YEARS")
}

enum RecipeStatus {
  ACCEPTED
  PENDING
  REVOKED
}

enum TransactionStatus {
  PENDING
  SUCCESS
  FAILED
}

enum TransactionType {
  VESTING_DEPLOYMENT
  FUNDING_CONTRACT
  ADDING_CLAIMS
  TOKEN_DEPLOYMENT
  REVOKE_CLAIM
  ADMIN_WITHDRAW
}

enum ConfirmationStatus {
  APPROVED
  REJECTED
}

enum Permission {
  ADMIN
  READ
}

enum InvitationStatus {
  PENDING
  ACCEPTED
}

enum VestingContractStatus {
  PENDING
  SUCCESS
  FAILED
  INITIALIZED
}

enum VestingStatus {
  INITIALIZED
  WAITING_APPROVAL
  WAITING_FUNDS
  LIVE
  CREATING
  CREATED
  COMPLETED
  REVOKED
  APPROVED
  SUCCESS
  FAILED
}

enum MilestoneVestingType {
  SIMPLE
  VESTED
}

model User {
  id            String           @id @default(uuid())
  firebaseId    String?          @map("firebase_id")
  createdAt     DateTime         @default(now()) @map("created_at")
  updatedAt     DateTime         @updatedAt @map("updated_at")
  deletedAt     DateTime?        @map("deleted_at")
  email         String           @unique
  name          String?
  isAdmin       Boolean          @default(false) @map("is_admin")
  wallets       Wallet[]
  organizations Organization[]
  roles         UserRole[]
  permissions   UserPermission[]
  recipes       Recipe[]

  @@map("user")
}

model EmailVerification {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  email     String   @unique
  code      String   @unique
  expiredAt BigInt   @map("expired_at")

  @@map("email_verification")
}

model Wallet {
  id         String      @id @default(uuid())
  createdAt  DateTime    @default(now()) @map("created_at")
  updatedAt  DateTime    @updatedAt @map("updated_at")
  address    String      @unique
  userId     String      @map("user_id")
  user       User        @relation(fields: [userId], references: [id])
  safeOwners SafeOwner[]
  recipes    Recipe[]

  @@map("wallet")
}

model Organization {
  id               String              @id @default(uuid())
  firebaseId       String?             @map("firebase_id")
  createdAt        DateTime            @default(now()) @map("created_at")
  updatedAt        DateTime            @updatedAt @map("updated_at")
  deletedAt        DateTime?           @map("deleted_at")
  userId           String              @map("user_id")
  user             User                @relation(fields: [userId], references: [id])
  name             String
  email            String
  roles            UserRole[]
  tokens           OrganizationToken[]
  vestingContracts VestingContract[]
  vestings         Vesting[]
  recipes          Recipe[]
  vestingTemplates VestingTemplate[]
  members          UserPermission[]
  websites         Website[]
  transactions     Transaction[]
  entities         Entity[]
  projects         Project[]
  revokings        Revoking[]
  memberships      Membership[]

  @@map("organization")
}

model UserRole {
  id             String       @id @default(uuid())
  createdAt      DateTime     @default(now()) @map("created_at")
  updatedAt      DateTime     @updatedAt @map("updated_at")
  role           Role         @default(FOUNDER)
  userId         String       @map("user_id")
  user           User         @relation(fields: [userId], references: [id])
  organizationId String       @map("organization_id")
  organization   Organization @relation(fields: [organizationId], references: [id])
  isAccepted     Boolean      @default(false)

  @@map("user_role")
}

model UserPermission {
  id             String       @id @default(uuid())
  createdAt      DateTime     @default(now()) @map("created_at")
  updatedAt      DateTime     @updatedAt @map("updated_at")
  permission     Permission   @default(READ)
  permissions    Json?
  userId         String       @map("user_id")
  user           User         @relation(fields: [userId], references: [id])
  organizationId String       @map("organization_id")
  organization   Organization @relation(fields: [organizationId], references: [id])
  isAccepted     Boolean      @default(false)

  @@map("user_permission")
}

model Transaction {
  id                String             @id @default(uuid())
  createdAt         DateTime           @default(now()) @map("created_at")
  updatedAt         DateTime           @updatedAt @map("updated_at")
  organizationId    String             @map("organization_id")
  organization      Organization       @relation(fields: [organizationId], references: [id])
  chainId           Int                @map("chain_id")
  hash              String?
  to                String
  safeHash          String?            @map("safe_hash")
  status            TransactionStatus  @default(PENDING)
  type              TransactionType
  tokens            Token[]
  vestingContracts  VestingContract[]
  vestings          Vesting[]
  safeWallets       SafeWallet[]
  safeConfirmations SafeConfirmation[]
  revokings         Revoking[]

  @@map("transaction")
}

model Token {
  id               String              @id @default(uuid())
  firebaseId       String?             @map("firebase_id")
  createdAt        DateTime            @default(now()) @map("created_at")
  updatedAt        DateTime            @updatedAt @map("updated_at")
  deletedAt        DateTime?           @map("deleted_at")
  name             String
  symbol           String
  decimal          Int
  imported         Boolean
  burnable         Boolean
  description      String?
  maxSupply        String?             @map("max_supply")
  supplyCap        String?             @map("supply_cap")
  totalSupply      String?             @map("total_supply")
  chainId          Int?                @map("chain_id")
  address          String?
  logo             String?
  transactionId    String?             @map("transaction_id")
  transaction      Transaction?        @relation(fields: [transactionId], references: [id])
  isDeployed       Boolean             @default(false) @map("is_deployed")
  organizations    OrganizationToken[]
  vestingContracts VestingContract[]
  vestings         Vesting[]

  @@map("token")
}

model OrganizationToken {
  id             String       @id @default(uuid())
  createdAt      DateTime     @default(now()) @map("created_at")
  updatedAt      DateTime     @updatedAt @map("updated_at")
  organizationId String       @map("organization_id")
  organization   Organization @relation(fields: [organizationId], references: [id])
  tokenId        String       @map("token_id")
  token          Token        @relation(fields: [tokenId], references: [id])

  @@map("organization_token")
}

model VestingContract {
  id             String                @id @default(uuid())
  firebaseId     String?               @map("firebase_id")
  createdAt      DateTime              @default(now()) @map("created_at")
  updatedAt      DateTime              @updatedAt @map("updated_at")
  deletedAt      DateTime?             @map("deleted_at")
  organizationId String                @map("organization_id")
  organization   Organization          @relation(fields: [organizationId], references: [id])
  tokenId        String                @map("token_id")
  token          Token                 @relation(fields: [tokenId], references: [id])
  name           String
  address        String?
  chainId        Int?                  @map("chain_id")
  transactionId  String?               @map("transaction_id")
  transaction    Transaction?          @relation(fields: [transactionId], references: [id])
  isDeployed     Boolean               @default(false) @map("is_deployed")
  status         VestingContractStatus @default(INITIALIZED)
  vestings       Vesting[]
  balance        String?
  isTimeBased    Boolean         @default(true) @map("is_timebased")
  milestoneVestings MilestoneVesting[]

  @@map("vesting_contract")
}

model Vesting {
  id                   String               @id @default(uuid())
  firebaseId           String?              @map("firebase_id")
  createdAt            DateTime             @default(now()) @map("created_at")
  updatedAt            DateTime             @updatedAt @map("updated_at")
  deletedAt            DateTime?            @map("deleted_at")
  organizationId       String               @map("organization_id")
  organization         Organization         @relation(fields: [organizationId], references: [id])
  tokenId              String               @map("token_id")
  token                Token                @relation(fields: [tokenId], references: [id])
  vestingContractId    String               @map("vesting_contract_id")
  vestingContract      VestingContract      @relation(fields: [vestingContractId], references: [id])
  name                 String
  startedAt            DateTime             @map("started_at")
  endedAt              DateTime             @map("ended_at")
  originalEndedAt      DateTime             @map("original_ended_at")
  releaseFrequencyType ReleaseFrequencyType @default(continuous) @map("release_frequency_type")
  releaseFrequency     Int                  @map("release_frequency")
  cliffDurationType    CliffDurationType    @default(no_cliff) @map("cliff_duration_type")
  cliffDuration        Int                  @default(0) @map("cliff_duration")
  cliffAmount          String               @default("0") @map("cliff_amount")
  amount               String
  transactionId        String?              @map("transaction_id")
  transaction          Transaction?         @relation(fields: [transactionId], references: [id])
  recipies             Recipe[]
  status               VestingStatus        @default(INITIALIZED)
  revokings            Revoking[]

  @@map("vesting")
}

model VestingTemplate {
  id                   String               @id @default(uuid())
  createdAt            DateTime             @default(now()) @map("created_at")
  updatedAt            DateTime             @updatedAt @map("updated_at")
  deletedAt            DateTime?            @map("deleted_at")
  organizationId       String               @map("organization_id")
  organization         Organization         @relation(fields: [organizationId], references: [id])
  name                 String
  releaseFrequencyType ReleaseFrequencyType @default(continuous) @map("release_frequency_type")
  releaseFrequency     Int                  @map("release_frequency")
  cliffDurationType    CliffDurationType    @default(no_cliff) @map("cliff_duration_type")
  cliffDuration        Int                  @default(0) @map("cliff_duration")
  cliffAmount          String               @default("0") @map("cliff_amount")

  @@map("vesting_template")
}

model Recipe {
  id             String       @id @default(uuid())
  firebaseId     String?      @map("firebase_id")
  createdAt      DateTime     @default(now()) @map("created_at")
  updatedAt      DateTime     @updatedAt @map("updated_at")
  deletedAt      DateTime?    @map("deleted_at")
  vestingId      String       @map("vesting_id")
  vesting        Vesting?      @relation(fields: [vestingId], references: [id])
  name           String?
  email          String?
  userId         String?      @map("user_id")
  user           User?        @relation(fields: [email], references: [email])
  organizationId String       @map("organization_id")
  organization   Organization @relation(fields: [organizationId], references: [id])
  address        String?
  wallet         Wallet?      @relation(fields: [address], references: [address])
  allocations    String
  status         RecipeStatus @default(PENDING)
  code           String       @unique
  role           Role         @default(EMPLOYEE)
  revokings      Revoking[]
  milestoneVestingId      String       @map("milestone_vesting_id") @unique
  milestoneVesting MilestoneVesting?      @relation(fields: [milestoneVestingId], references: [id])

  @@map("recipe")
}

model SafeWallet {
  id                    String             @id @default(uuid())
  firebaseId            String?            @map("firebase_id")
  createdAt             DateTime           @default(now()) @map("created_at")
  updatedAt             DateTime           @updatedAt @map("updated_at")
  name                  String?
  chainId               Int                @map("chain_id")
  address               String
  organizationId        String             @map("organization_id")
  requiredConfirmations Int                @map("required_confirmations")
  transactionId         String?            @map("transaction_id")
  transaction           Transaction?       @relation(fields: [transactionId], references: [id])
  safeOwners            SafeOwner[]
  safeConfirmations     SafeConfirmation[]

  @@map("safe_wallet")
}

model SafeOwner {
  id                String             @id @default(uuid())
  createdAt         DateTime           @default(now()) @map("created_at")
  updatedAt         DateTime           @updatedAt @map("updated_at")
  safeWalletId      String             @map("safe_wallet_id")
  safeWallet        SafeWallet         @relation(fields: [safeWalletId], references: [id])
  name              String?
  address           String
  wallet            Wallet?            @relation(fields: [address], references: [address])
  safeConfirmations SafeConfirmation[]

  @@map("safe_owner")
}

model SafeConfirmation {
  id            String             @id @default(uuid())
  createdAt     DateTime           @default(now()) @map("created_at")
  updatedAt     DateTime           @updatedAt @map("updated_at")
  safeWalletId  String             @map("safe_wallet_id")
  safeWallet    SafeWallet         @relation(fields: [safeWalletId], references: [id])
  safeOwnerId   String             @map("safe_owner_id")
  safeOwner     SafeOwner          @relation(fields: [safeOwnerId], references: [id])
  transactionId String             @map("transaction_id")
  transaction   Transaction        @relation(fields: [transactionId], references: [id])
  status        ConfirmationStatus

  @@map("safe_confirmation")
}

model Website {
  id             String       @id @default(uuid())
  createdAt      DateTime     @default(now()) @map("created_at")
  updatedAt      DateTime     @updatedAt @map("updated_at")
  deletedAt      DateTime?    @map("deleted_at")
  organizationId String       @map("organization_id")
  organization   Organization @relation(fields: [organizationId], references: [id])
  email          String?
  domains        Json[]
  features       Json?
  assets         Json?
  links          Json?
  styles         Json?

  @@map("website")
}

model Entity {
  id              String          @id @default(uuid())
  createdAt       DateTime        @default(now()) @map("created_at")
  updatedAt       DateTime        @updatedAt @map("updated_at")
  deletedAt       DateTime?       @map("deleted_at")
  name            String
  organizationId  String          @map("organization_id")
  organization    Organization    @relation(fields: [organizationId], references: [id])
  projectEntities ProjectEntity[]

  @@map("entity")
}

model Project {
  id              String          @id @default(uuid())
  createdAt       DateTime        @default(now()) @map("created_at")
  updatedAt       DateTime        @updatedAt @map("updated_at")
  name            String
  organizationId  String          @map("organization_id")
  organization    Organization    @relation(fields: [organizationId], references: [id])
  chainId         Int             @map("chain_id")
  isLive          Boolean         @map("is_live")
  contract        String
  website         String?
  tgeDate         DateTime?       @map("tge_date")
  wallet          String
  projectEntities ProjectEntity[]

  @@map("project")
}

model ProjectEntity {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  projectId String   @map("project_id")
  project   Project  @relation(fields: [projectId], references: [id])
  entityId  String   @map("entity_id")
  entity    Entity   @relation(fields: [entityId], references: [id])

  @@map("project_entity")
}

model Revoking {
  id             String            @id @default(uuid())
  createdAt      DateTime          @default(now()) @map("created_at")
  updatedAt      DateTime          @updatedAt @map("updated_at")
  chainId        Int               @map("chain_id")
  recipeId       String            @map("recipe_id")
  recipe         Recipe            @relation(fields: [recipeId], references: [id])
  vestingId      String            @map("vesting_id")
  vesting        Vesting           @relation(fields: [vestingId], references: [id])
  transactionId  String?           @map("transaction_id")
  transaction    Transaction?      @relation(fields: [transactionId], references: [id])
  organizationId String            @map("organization_id")
  organization   Organization      @relation(fields: [organizationId], references: [id])
  status         TransactionStatus @default(PENDING)

  @@map("revoking")
}

model Membership {
  id             String       @id @default(uuid())
  createdAt      DateTime     @default(now()) @map("created_at")
  updatedAt      DateTime     @updatedAt @map("updated_at")
  deletedAt      DateTime?    @map("deleted_at")
  organizationId String       @map("organization_id")
  organization   Organization @relation(fields: [organizationId], references: [id])
  key            String
  @@map("membership")
}

model MilestoneVesting {
  id                   String               @id @default(uuid())
  createdAt            DateTime             @default(now()) @map("created_at")
  updatedAt            DateTime             @updatedAt @map("updated_at")
  deletedAt            DateTime?            @map("deleted_at")
  organizationId       String               @map("organization_id")
  vestingContractId    String               @map("vesting_contract_id")
  vestingContract      VestingContract      @relation(fields: [vestingContractId], references: [id])
  transactionId        String?              @map("transaction_id")
  recipe               Recipe?
  status               VestingStatus        @default(INITIALIZED)
  type                 MilestoneVestingType
  milestones           Milestone[]
  @@map("milestone_vesting")
}

model MilestoneVestingTemplate {
  id                   String               @id @default(uuid())
  createdAt            DateTime             @default(now()) @map("created_at")
  updatedAt            DateTime             @updatedAt @map("updated_at")
  deletedAt            DateTime?            @map("deleted_at")
  organizationId       String               @map("organization_id")
  name                 String
  milestones           Milestone[]
  @@map("milestone_vesting_template")
}

model Milestone {
  id                   String               @id @default(uuid())
  createdAt            DateTime             @default(now()) @map("created_at")
  updatedAt            DateTime             @updatedAt @map("updated_at")
  deletedAt            DateTime?            @map("deleted_at")
  organizationId       String               @map("organization_id")
  name                 String
  templateId           String?
  Template             MilestoneVestingTemplate? @relation(fields: [templateId], references: [id])
  vestingId   String? @map("vesting_id")
  Vesting     MilestoneVesting? @relation(fields: [vestingId], references: [id])

  @@map("milestone")
}
